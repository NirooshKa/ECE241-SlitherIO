// Part 2 skeleton

module fill
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
		
		SW, KEY,
		
		
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	// Declare your inputs and outputs here
	
	input [9:0] SW;
	input [3:0] KEY;
	
	
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	wire resetn;
	assign resetn = KEY[0];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
	wire s_loadx, s_clear, s_plot;
	wire [13:0] counter;
	
	fsm f1 ( .clk(CLOCK_50),
				.reset(KEY[0]),
				.plot(KEY[1]),
				.clear(KEY[2]),
				.loadx(KEY[3]),
				.s_loadx(s_loadx),
				.s_clear(s_clear),
				.s_plot(s_plot),
				.counter(counter),
				
				.writeEn(writeEn)
				);
				
	datapath d1(   .clk(CLOCK_50),
						.reset(KEY[0]),
						.s_loadx(s_loadx),
						.s_clear(s_clear),
						.s_plot(s_plot),
						.counter(counter),
						.position(SW[6:0]),
						.color(SW[9:7]),
	
	
						.out_x(x), 
						.out_y(y), 
						.out_color(colour)
						);
	
	
endmodule






module fsm(
	input clk,
	
	input reset,
	input plot,
	input clear,
	input loadx,

	output reg s_loadx, s_clear, s_plot,
	output reg [13:0] counter,
	output reg writeEn
	);

	reg [5:0] current_state, next_state;
	
	
	
	localparam  idle = 5'd3,
					A = 5'd0,
					B = 5'd1, 
					C = 5'd2;
					
	
	always @(*)
	begin: state_table
		case (current_state)
			idle: begin
				if (loadx == 1'b0) next_state = A;
				if (plot == 1'b0) next_state = B;
				if (clear == 1'b0) next_state = C;
			end
		
			A: next_state = idle;
			
			B: begin
				if (counter == {{10{1'b0}}, 4'b1111}) next_state = idle;
				else next_state = B;
			end
			
			C: begin
				if (counter == {14{1'b1}}) next_state = idle;
				else next_state = C;
			end
				
		default: next_state = idle;
		
		endcase
	end
	

	always @(*)
	begin: enable_signals
		s_loadx = 1'b0;
		s_clear = 1'b0;
		s_plot = 1'b0;
		writeEn = 1'b0;
		
		case(current_state)
			A: s_loadx = 1'b1;
			
			B: begin
				s_plot = 1'b1;
				writeEn = 1'b1;
			end
			
			C: begin
				s_clear = 1'b1;
				writeEn = 1'b1;
			end
			
		endcase
	end


	
	always @ (posedge clk)
	begin: state_FFS
	
		if (reset == 1'b0) begin
			current_state <= idle;
			counter <= {14{1'b0}};
		end
		
		else begin
			current_state <= next_state;
			
			if (current_state == B) begin
				if (counter == {{10{1'b0}}, 4'b1111}) counter <= {14{1'b0}};
				else counter <= counter + {{13{1'b0}} , 1'b1};
			end
			
			if (current_state == C) begin
				//writeEn <= 1'b1;
				if (counter == {14{1'b1}}) counter <= {14{1'b0}};
				else counter <= counter + {{13{1'b0}} , 1'b1};
			end
			
		end
		
	end
	

endmodule







module datapath(
	input clk,
	input reset,
	
	input s_loadx, s_clear, s_plot,
	input [13:0] counter,
	
	input [6:0] position,
	input [2:0] color,
	
	
	output reg [7:0] out_x, 
	output reg [6:0] out_y, 
	output reg [2:0] out_color
	
	);
	
	reg [7:0] x;
	
	always @ (posedge clk)
	begin
		if (reset == 0) begin
			x <= {8{1'b0}};
			out_y <= {7{1'b0}};
			out_color <= 3'b000;
			out_x <= {8{1'b0}};
		
		end
	
		else begin
			
			if (s_loadx) x <= {1'b0, position};
			
			if (s_plot) begin
				out_x <= x + { {6{1'b0}}, counter[1:0]};
				out_y <= position + { {5{1'b0}}, counter[3:2]};
				out_color <= color;
			end
			
			
			if (s_clear) begin
				out_x <= {1'b0, counter[6:0]};
				out_y <= counter[13:7];
				out_color <= 3'b000;
			end
		
		end
	
	
	end
	
	

endmodule

